{"version":3,"sources":["utils/apiDataCall.js","utils/parseForm.js","components/Characters.js","components/Pagination.js","components/Aside.js","components/App.js","index.js"],"names":["apiDataCall","arg","_query","Object","asyncToGenerator","regenerator_default","a","mark","_callee","address","response","wrap","_context","prev","next","fetch","sent","ok","json","abrupt","stop","apply","this","arguments","_x","query","concat","parseForm","form","INPUTSTOPARSE","entries","map","element","filter","name","checked","type","value","item","Characters","props","react_default","createElement","className","charactersData","charData","key","id","src","image","alt","status","species","gender","Pagination","pagesCount","paginationElements","i","push","onClick","currentPage","filterOptions","options","FormFilterField","currentFilter","defaultChecked","Aside","onSubmit","formSubmitHandler","placeholder","Aside_FormFilterField","href","APPSTATUS","dataNotLoaded","dataLoaded","App","state","statusText","ascDescArraySorter","arr","sort","b","paginationClickHandler","e","clickedElementId","target","queryWithPagination","_this","then","setState","results","info","pages","preventDefault","formDataArray","console","log","characterIdSearchValue","find","catch","reason","join","sortingOption","sortedArrayOfChars","handleEmptyContent","error","components_Aside","_this2","Characters_Characters","Pagination_Pagination","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.d87e43f2.chunk.js","sourcesContent":["export default function(arg) {\r\n  const APIPATHS = {\r\n    ApiCharactersCall: \"https://rickandmortyapi.com/api/character\"\r\n  };\r\n\r\n  async function query(address) {\r\n    const response = await fetch(address);\r\n\r\n    if (response.ok) {\r\n      return await response.json();\r\n    } else {\r\n      throw response;\r\n    }\r\n  }\r\n\r\n  return query(`${APIPATHS.ApiCharactersCall}${arg}`);\r\n}\r\n","export default form => {\r\n  const INPUTSTOPARSE = {\r\n    searchInput: \"search\"\r\n  };\r\n\r\n  const formNodeElements = Object.entries(form).map(element => element[1]);\r\n\r\n  const checkIfElementHasNameAttr = element => {\r\n    return element.name ? element : null;\r\n  };\r\n\r\n  const returnCheckedElement = element => {\r\n    return element.checked || element.type === INPUTSTOPARSE.searchInput\r\n      ? { name: element.name, value: element.value }\r\n      : null;\r\n  };\r\n\r\n  return formNodeElements\r\n    .filter(checkIfElementHasNameAttr)\r\n    .map(returnCheckedElement)\r\n    .filter(item => item);\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Characters = props => {\r\n  return (\r\n    <ul className=\"card-list\">\r\n      {props.charactersData.map(charData => {\r\n        return (\r\n          <li key={charData.id} className=\"card-list__item\">\r\n            <div className=\"card-list__item-wrap\">\r\n              <img className=\"card-list__photo\" src={charData.image} alt=\"#\" />\r\n              <div className=\"card-list__name-wrap\">\r\n                <p className=\"card-list__name\">{charData.name}</p>\r\n                <p className=\"card-item__id-info\">ID: {charData.id}</p>\r\n              </div>\r\n              <div className=\"card-list__character-specs\">\r\n                <div className=\"card-list__character-spec-item\">\r\n                  <span className=\"card-list__spec\">Status</span>\r\n                  <span className=\"card-list__spec-value\">\r\n                    {charData.status}\r\n                  </span>\r\n                </div>\r\n                <div className=\"card-list__character-spec-item\">\r\n                  <span className=\"card-list__spec\">Species</span>\r\n                  <span className=\"card-list__spec-value\">\r\n                    {charData.species}\r\n                  </span>\r\n                </div>\r\n                <div className=\"card-list__character-spec-item\">\r\n                  <span className=\"card-list__spec\">Gender</span>\r\n                  <span className=\"card-list__spec-value\">\r\n                    {charData.gender}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Pagination = props => {\r\n  if (!props.pagesCount || props.pagesCount === 1) return \"\";\r\n\r\n  let paginationElements = [];\r\n\r\n  for (let i = 1; i <= props.pagesCount; i++) {\r\n    paginationElements.push(\r\n      <li\r\n        onClick={props.onClick}\r\n        className={\r\n          \"pagination__item\" +\r\n          (props.currentPage === i ? \" pagination__item_active\" : \"\")\r\n        }\r\n        id={i}\r\n        key={i}\r\n      >\r\n        {i}\r\n      </li>\r\n    );\r\n  }\r\n\r\n  return <ul className=\"pagination\">{paginationElements}</ul>;\r\n};\r\n","import React from \"react\";\r\n\r\nconst filterOptions = [\r\n  {\r\n    name: \"species\",\r\n    options: [\r\n      \"all\",\r\n      \"human\",\r\n      \"alien\",\r\n      \"humanoid\",\r\n      \"mytholog\",\r\n      \"animal\",\r\n      \"robot\"\r\n    ]\r\n  },\r\n  {\r\n    name: \"gender\",\r\n    options: [\"all\", \"male\", \"female\", \"genderless\", \"unknown\"]\r\n  },\r\n  { name: \"status\", options: [\"all\", \"alive\", \"dead\", \"unknown\"] }\r\n];\r\n\r\nconst FormFilterField = filter => {\r\n  const currentFilter = filter.filter;\r\n\r\n  return (\r\n    <fieldset className=\"filter__item-wrap\">\r\n      <legend className=\"filter__type-head\">{currentFilter.name}</legend>\r\n      {currentFilter.options.map((item, i) => {\r\n        return (\r\n          <label key={i} className=\"filter__item\">\r\n            <input\r\n              type=\"radio\"\r\n              name={currentFilter.name}\r\n              value={item === \"all\" ? \"\" : item}\r\n              defaultChecked={item === \"all\"}\r\n            />\r\n            {item}\r\n          </label>\r\n        );\r\n      })}\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nconst Aside = props => {\r\n  return (\r\n    <aside className=\"sidebar\">\r\n      <form onSubmit={props.formSubmitHandler} className=\"filter\">\r\n        <section>\r\n          <h2 className=\"filter__heading\">Search:</h2>\r\n          <label>\r\n            <input type=\"search\" name=\"name\" placeholder=\"Search by name\" />\r\n          </label>\r\n          <label>\r\n            <input type=\"search\" name=\"id\" placeholder=\"Search by ID\" />\r\n          </label>\r\n        </section>\r\n\r\n        <section>\r\n          <h2 className=\"filter__heading\">Sorting:</h2>\r\n          <fieldset className=\"filter__item-wrap\">\r\n            <legend className=\"filter__type-head\">Name</legend>\r\n            <label className=\"filter__item\">\r\n              <input type=\"radio\" name=\"sort\" value=\"asc-name\" />\r\n              asc\r\n            </label>\r\n            <label className=\"filter__item\">\r\n              <input type=\"radio\" name=\"sort\" value=\"desc-name\" />\r\n              desc\r\n            </label>\r\n          </fieldset>\r\n          <fieldset className=\"filter__item-wrap\">\r\n            <legend className=\"filter__type-head\">ID</legend>\r\n            <label className=\"filter__item\">\r\n              <input type=\"radio\" name=\"sort\" defaultChecked value=\"asc-id\" />\r\n              asc\r\n            </label>\r\n            <label className=\"filter__item\">\r\n              <input type=\"radio\" name=\"sort\" value=\"desc-id\" />\r\n              desc\r\n            </label>\r\n          </fieldset>\r\n        </section>\r\n\r\n        <section>\r\n          <h2 className=\"filter__heading\">Filtering:</h2>\r\n          {filterOptions.map((item, i) => (\r\n            <FormFilterField key={i} filter={item} />\r\n          ))}\r\n        </section>\r\n\r\n        <button className=\"filter__btn\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n        <button className=\"filter__btn\" type=\"button\">\r\n          <a href=\"/react-rick-and-morty/\">Reset</a>\r\n        </button>\r\n      </form>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Aside;\r\n","import React, { Component } from \"react\";\r\nimport apiDataCall from \"../utils/apiDataCall\";\r\nimport parseForm from \"../utils/parseForm\";\r\nimport { Characters } from \"./Characters\";\r\nimport { Pagination } from \"./Pagination\";\r\nimport Aside from \"./Aside\";\r\n\r\nconst APPSTATUS = {\r\n  dataNotLoaded: \"notLoaded\",\r\n  dataLoaded: \"ok\"\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    status: APPSTATUS.dataNotLoaded,\r\n    query: \"\",\r\n    currentPage: 1,\r\n    statusText: \"Loading...\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    apiDataCall(this.state.query)\r\n      .then(response => {\r\n        this.setState({\r\n          charactersData: response.results,\r\n          pagesCount: response.info.pages,\r\n          status: APPSTATUS.dataLoaded\r\n        });\r\n      })\r\n      .catch(reason => {\r\n        this.setState({\r\n          status: APPSTATUS.dataNotLoaded,\r\n          statusText: reason.statusText\r\n        });\r\n      });\r\n  }\r\n\r\n  ascDescArraySorter = (arr, type) => {\r\n    switch (type) {\r\n      case \"asc-name\":\r\n        return arr.sort((b, a) => (b.name < a.name ? -1 : 1));\r\n      case \"desc-name\":\r\n        return arr.sort((a, b) => (b.name < a.name ? -1 : 1));\r\n      case \"asc-id\":\r\n        return arr.sort((b, a) => (b.id < a.id ? -1 : 1));\r\n      case \"desc-id\":\r\n        return arr.sort((a, b) => (b.id < a.id ? -1 : 1));\r\n      default:\r\n        return arr;\r\n    }\r\n  };\r\n\r\n  paginationClickHandler = e => {\r\n    const clickedElementId = +e.target.id;\r\n    const queryWithPagination = `page=${clickedElementId}&${this.state.query}`;\r\n\r\n    apiDataCall(`?${queryWithPagination}`).then(response => {\r\n      this.setState({\r\n        charactersData: response.results,\r\n        pagesCount: response.info.pages,\r\n        currentPage: clickedElementId\r\n      });\r\n    });\r\n  };\r\n\r\n  formSubmitHandler = e => {\r\n    e.preventDefault();\r\n\r\n    const formDataArray = parseForm(e.target);\r\n    console.log(formDataArray);\r\n\r\n    const characterIdSearchValue = formDataArray.find(\r\n      item => item.name === \"id\"\r\n    ).value;\r\n\r\n    if (+characterIdSearchValue) {\r\n      return apiDataCall(`/${characterIdSearchValue}`)\r\n        .then(response => {\r\n          this.setState({\r\n            charactersData: [response],\r\n            pagesCount: null,\r\n            status: APPSTATUS.dataLoaded\r\n          });\r\n        })\r\n        .catch(reason => {\r\n          this.setState({\r\n            status: APPSTATUS.dataNotLoaded,\r\n            statusText: reason.statusText\r\n          });\r\n        });\r\n    }\r\n\r\n    const query = formDataArray\r\n      .map(item => (item.value ? `${item.name}=${item.value}&` : \"\"))\r\n      .join(\"\");\r\n\r\n    const sortingOption = formDataArray.find(item => item.name === \"sort\")\r\n      .value;\r\n\r\n    apiDataCall(`?${query}`)\r\n      .then(response => {\r\n        if (sortingOption) {\r\n          const sortedArrayOfChars = this.ascDescArraySorter(\r\n            response.results,\r\n            sortingOption\r\n          );\r\n\r\n          this.setState({\r\n            charactersData: sortedArrayOfChars\r\n          });\r\n        } else {\r\n          this.setState({\r\n            charactersData: response.results\r\n          });\r\n        }\r\n\r\n        this.setState({\r\n          pagesCount: response.info.pages,\r\n          status: APPSTATUS.dataLoaded,\r\n          query: query,\r\n          currentPage: 1\r\n        });\r\n      })\r\n      .catch(reason => {\r\n        this.setState({\r\n          status: APPSTATUS.dataNotLoaded,\r\n          statusText: reason.statusText\r\n        });\r\n      });\r\n  };\r\n\r\n  handleEmptyContent = error => {\r\n    return (\r\n      <div className=\"container\">\r\n        <Aside formSubmitHandler={this.formSubmitHandler} />\r\n        <main>\r\n          <h2>{error}</h2>\r\n        </main>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    switch (this.state.status) {\r\n      case APPSTATUS.dataNotLoaded:\r\n        return this.handleEmptyContent(this.state.statusText);\r\n      case APPSTATUS.dataLoaded:\r\n        return (\r\n          <div className=\"container\">\r\n            <Aside formSubmitHandler={this.formSubmitHandler} />\r\n            <main>\r\n              <Characters charactersData={this.state.charactersData} />\r\n              <Pagination\r\n                pagesCount={this.state.pagesCount}\r\n                currentPage={this.state.currentPage}\r\n                onClick={this.paginationClickHandler}\r\n              />\r\n            </main>\r\n          </div>\r\n        );\r\n      default:\r\n        return this.handleEmptyContent(this.state.statusText);\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/App.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}